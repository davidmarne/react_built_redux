import 'dart:async';

import 'package:built_redux/built_redux.dart';
import 'package:built_value/built_value.dart';
import 'package:over_react/over_react.dart';

import '../typedefs/typedefs.dart';<>
import './redux_store_connect.dart';

@Factory()
UiFactory<ReduxDevToolsProps> ReduxDevTools;

// @State()
// class ReduxDevToolsState<S extends BuiltReducer<S, B>, B extends Builder<S, B>> {
//   List<S>
// }

@Props()
class ReduxDevToolsProps<P, S extends BuiltReducer<S, B>, B extends Builder<S, B>,
    A extends ReduxActions> extends UiProps {
  ReduxProps<S, B, A> reduxProps;
}

@Component()
class ReduxDevToolsComponent<P, S extends BuiltReducer<S, B>, B extends Builder<S, B>,
    A extends ReduxActions> extends UiComponent<ReduxDevToolsProps<P, S, B, A>> {
  /// List of store subscriptions created when the component mounts.
  ///
  /// These subscriptions are canceled when the component is unmounted.
  StreamSubscription _subscription;

  void componentWillMount() {
    super.componentWillMount();
    _subscription = props.reduxProps.store.subscribe.listen((stateChange) => (setState()
      ..statesChanges = state.statesChanges.prepend(stateChange)
    ));
  }

  void componentWillUnmount() {
    super.componentWillUnmount();
    _subscription.cancel();
  }

  render() => (Dom.div()
    ..className='built-redux-dev-tools')(state.stateChanges.map((stateChange) => _stateChangeItem(stateChange)));

  _stateChangeItem(stateChange) => Dom.div()(
    _action(stateChange.action),
    _state(stateChange.next),
  );

  _action(Action a) => Dom.div()(a.name);
}
